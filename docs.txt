==================================================
Fudge: A Python module for mocks, stubs, and fakes
==================================================

A Real Example: Fudging The Google AdWords API
==============================================

Let's say you have some code that interacts with Google's AdWords API, a SOAP web service for managing ad campaigns.  If your automated tests run code that use this API, you have a couple options:

1. Always use the AdWords Sandbox.  But this would slow down your tests and you might go over your usage quota.
2. Fabricate a fake SOAP server.  *Shudder*
3. Use the Fudge module and replace your AdWords API object with a fake object that behaves the same

As with any kind of automated testing, you should ask yourself, *what am I testing?*  If you're using the awapi package from Google Code you probably do not need to test awapi itself; it already has unit tests of its own.  If you were to test awapi your code would be redundant and slower than they need to be.  This is a great use case for Fudge.

This is how you might connect to the AdWords API in production to create a new ad campaign:

Here's a method that creates and returns a new AdWords client::

    >>> def get_client(**auth_kwargs):
    ...     from awapi.lib.Client import Client
    ...     client = Client(headers=auth_kwargs)
    ...     return client
    >>> 

How would you unit test this methods without touching the real server?  Here's how to do it with Fudge.

First set up a fake Client object with an expectation that it will be called the same way that the real one gets called::

    >>> import fudge
    >>> Client = fudge.Fake()
    >>> Client = Client.expects('__init__').with_args(headers=dict(
    ...                         email="some-google-id@wherever.com",
    ...                         password="xxxxxx"))
    ... 

Next, replace the real awapi.lib.Client object temporarily during your test::

    >>> from fudge import patch_object
    >>> import awapi.lib.Client
    >>> patched_awapi = patch_object(awapi.lib.Client, "Client", Client)

Tell fudge you're starting to test some code that might call fake objects::

    >>> fudge.start()

Now, run the get_client() method and see what happens::
    
    >>> client = get_client(email="some-google-id@wherever.com", password="xxxxxx")
    >>> client # doctest: +ELLIPSIS
    <fudge.Fake object at ...>

When done testing, be sure to tell fudge in case some of your fake objects were not called::

    >>> fudge.stop()

Finally, restore the real Client object::

    >>> patched_awapi.restore()

Fudging An Object That Returns an Object
----------------------------------------

Next, consider this method to create a campaign.  Because SOAP is so amazing, you 
have to obtain the campaign_service object from the client object, then you can 
make a call on the campaign_service to create a simple campaign::
    
    >>> def create_campaign(client, name=None, dailyBudget=0, status='Active'):
    ...     campaign_service = client.GetCampaignService(
    ...                             'https://sandbox.google.com')
    ...     campaign = dict(name=name, 
    ...                     dailyBudget=dailyBudget, 
    ...                     status=status)
    ...     return campaign_service.AddCampaign(campaign)
    ... 
    >>> 

This is how to set this with Fudge::

    >>> import fudge
    >>> client = fudge.Fake().expects('GetCampaignService').with_args(
    ...                                             'https://sandbox.google.com')
    >>> service = client.returns_fake() # set the return to a new fake object
    >>> service = service.expects('AddCampaign').with_args(
    ...                     name="Thanksgiving Day Sale",
    ...                     dailyBudget=10000,
    ...                     status='Paused')
    >>> service = service.returns("Campaign created successfully")

Since the method doesn't import anything you don't 
have to use a patcher, just start testing::
    
    >>> fudge.start()
    >>> result = create_campaign( client,
    ...                     name="Thanksgiving Day Sale", 
    ...                     dailyBudget=10000, 
    ...                     status='Paused')
    ... 
    >>> result
    'Campaign created successfully'




